#+title: Advent of Code Day 4 Solution
#+property: header-args :tangle solution.jl

Sample input:
#+begin_src sh :results verbatim :tangle no :exports both
cat sample_input
#+end_src

#+RESULTS:
: 2-4,6-8
: 2-3,4-5
: 5-7,7-9
: 2-8,3-7
: 6-6,4-6
: 2-6,4-8

Each pair of elves, are assigned sections: b1-e1,b2-e2
In how many assignment pairs does one range fully contain the other?

#+begin_src julia :session day4 :exports both
using DelimitedFiles

filename = get(ARGS, 1, "sample_input")
input = readdlm(filename, ',', String) |> f -> map(x -> map(i -> parse(Int, i), split(x, "-")), f) |> eachrow |> collect
#+end_src

#+RESULTS:
: 6-element Vector{SubArray{Vector{Int64}, 1, Matrix{Vector{Int64}}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}:
:  [[2, 4], [6, 8]]
:  [[2, 3], [4, 5]]
:  [[5, 7], [7, 9]]
:  [[2, 8], [3, 7]]
:  [[6, 6], [4, 6]]
:  [[2, 6], [4, 8]]

#+begin_src julia :session day4 :exports both
fully_contained = [(x[1][1] in x[2][1]:x[2][2] && x[1][2] in x[2][1]:x[2][2]) || (x[2][1] in x[1][1]:x[1][2] && x[2][2] in x[1][1]:x[1][2]) for x in input]
#+end_src

#+RESULTS:
: 6-element Vector{Bool}:
:  0
:  0
:  0
:  1
:  1
:  0

#+begin_src julia :session day4 :results output :exports both
println("Part 1: ", sum(fully_contained))
#+end_src

#+RESULTS:
: Part 1: 2

#+begin_src julia :session day4 :exports both
overlap = [(x[1][1] in x[2][1]:x[2][2] || x[1][2] in x[2][1]:x[2][2]) || (x[2][1] in x[1][1]:x[1][2] || x[2][2] in x[1][1]:x[1][2]) for x in input]
#+end_src

#+RESULTS:
: 6-element Vector{Bool}:
:  0
:  0
:  1
:  1
:  1
:  1

#+begin_src julia :session day4 :results output :exports both
println("Part 2: ", sum(overlap))
#+end_src

#+RESULTS:
: Part 2: 4
