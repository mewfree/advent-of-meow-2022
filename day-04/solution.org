#+title: Advent of Code Day 4 Solution

Sample input:
#+begin_src sh :results verbatim
cat sample_input
#+end_src

#+RESULTS:
: 2-4,6-8
: 2-3,4-5
: 5-7,7-9
: 2-8,3-7
: 6-6,4-6
: 2-6,4-8

Each pair of elves, are assigned sections: b1-e1,b2-e2
In how many assignment pairs does one range fully contain the other?

#+begin_src julia-vterm :session day4
using DelimitedFiles

input = readdlm("input", ',', String) |> f -> map(x -> map(i -> parse(Int, i), split(x, "-")), f) |> eachrow |> collect
#+end_src

#+RESULTS:
#+begin_example
1000-element Vector{SubArray{Vector{Int64}, 1, Matrix{Vector{Int64}}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}:
 [[11, 73], [29, 73]]
 [[43, 82], [44, 44]]
 [[13, 85], [12, 36]]
 [[69, 80], [5, 44]]
 [[60, 63], [30, 62]]
 [[21, 21], [21, 79]]
 [[5, 91], [92, 99]]
 [[1, 5], [4, 9]]
 [[32, 66], [23, 31]]
 [[10, 10], [10, 72]]
 ⋮
 [[42, 65], [50, 67]]
 [[61, 81], [78, 88]]
 [[9, 94], [10, 93]]
 [[27, 88], [27, 89]]
 [[19, 70], [20, 73]]
 [[29, 97], [28, 98]]
 [[1, 88], [3, 75]]
 [[58, 69], [38, 69]]
 [[38, 76], [37, 76]]
#+end_example

#+begin_src julia-vterm :session day4
fully_contained = [(x[1][1] in x[2][1]:x[2][2] && x[1][2] in x[2][1]:x[2][2]) || (x[2][1] in x[1][1]:x[1][2] && x[2][2] in x[1][1]:x[1][2]) for x in input]
#+end_src

#+RESULTS:
#+begin_example
1000-element Vector{Bool}:
 1
 1
 0
 0
 0
 1
 0
 0
 0
 1
 ⋮
 0
 0
 1
 1
 0
 1
 1
 1
 1
#+end_example

#+begin_src julia-vterm :session day4 :results output
println("Part 1: ", sum(fully_contained))
#+end_src

#+RESULTS:
: Part 1: 528
